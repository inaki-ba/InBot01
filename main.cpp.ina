/*
 * rosserial Planar Odometry Example
 */

#include <string.h>
#include <ros.h>
#include <ros/time.h>

#include <tf/tf.h>
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>

#include <sensor_msgs/JointState.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/MagneticField.h>

#include "mbed.h"

#include "pid.h"
#include "Sensing.h"
#include "Motor.h"

Serial pc(USBTX, USBRX);

ros::NodeHandle  nh;

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster broadcaster;

double x = 1.0;
double y = 0.0;
double theta = 1.57;

char base_link[] = "/base_link";
char odom[] = "/odom";
char s_imu[] = "/imu";


/* Functions -----------------------------------------------------------------*/
 
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  error number of the error
  * @retval None
  */
void my_error_handler(uint16_t error)
{
  /* Backup error number */
  gLastError = error;
  
  /* Enter your own code here */
}
 
/**
* @brief  This function is the User handler for the flag interrupt
* @param  None
* @retval None
* @note   If needed, implement it, and then attach and enable it:
*           + motor->attach_flag_interrupt(my_flag_irq_handler);
*/
void my_flag_irq_handler(void)
{
  /* Code to be customised */
  /************************/
  /* Get the state of bridge A */
  uint16_t bridgeState  = motor->get_bridge_status(0);
  
  if (bridgeState == 0) {
    if ((motor->get_device_state(0) != INACTIVE)||
        (motor->get_device_state(1) != INACTIVE)) {
      /* Bridge A was disabling due to overcurrent or over temperature */
      /* When at least on of its  motor was running */
        my_error_handler(0XBAD0);
    }
  }
  
  /* Get the state of bridge B */
  bridgeState  = motor->get_bridge_status(1);
  
  if (bridgeState == 0)  {
    if ((motor->get_device_state(2) != INACTIVE)||
        (motor->get_device_state(3) != INACTIVE)) {
      /* Bridge A was disabling due to overcurrent or over temperature */
      /* When at least on of its  motor was running */
        my_error_handler(0XBAD1);
    }
  }  
}
 
 
/* Private functions ---------------------------------------------------------*/
 
/**
  * @brief  Button Irq
  * @param  None
  * @retval None
  */
 
void my_button_pressed(void)
{
    my_button_irq.disable_irq();
    gStep++;
    if (gStep > MAX_MOTOR) {
        gStep = 0;
    }
    wait_ms(200);
    my_button_irq.enable_irq();
}


int main( void ) {

    pc.baud(115200);
    nh.initNode();    

    broadcaster.init(nh);

    nav_msgs::Odometry odom_msg;

    sensor_msgs::Imu imu;
    sensor_msgs::MagneticField imu_mag;

    ros::Publisher t_pub("odom", &odom_msg); 
    ros::Publisher imu_publisher("imu/data", &imu);
    ros::Publisher mag_publisher("imu/mag", &imu_mag);

    nh.advertise(imu_publisher);
    nh.advertise(mag_publisher);

    uint8_t id;
    int32_t axes[3];
    int32_t off[3];
    float parziale[3];
    float finale[3];
    int32_t k=0;
    
    for(int i=0;i<3;i++)
        {parziale[i]=0;}
 
    for(int i=0;i<3;i++)
        {finale [i]=0;}

      /* Enable all sensors */
     
    hum_temp->enable();
    press_temp->enable();
    magnetometer->enable();
    accelerometer->enable();
    acc_gyro->enable_x();
    acc_gyro->enable_g();
    
    printf("\r\n--- Starting new run ---\r\n");

    hum_temp->read_id(&id);
    pc.printf("HTS221  humidity & temperature    = 0x%X\r\n", id);
    press_temp->read_id(&id);
    pc.printf("LPS22HB  pressure & temperature   = 0x%X\r\n", id);
    magnetometer->read_id(&id);
    pc.printf("LSM303AGR magnetometer            = 0x%X\r\n", id);
    accelerometer->read_id(&id);
    pc.printf("LSM303AGR accelerometer           = 0x%X\r\n", id);
    acc_gyro->read_id(&id);
    pc.printf("LSM6DSL accelerometer & gyroscope = 0x%X\r\n", id);

      
      wait(1.5);
            
      /*----- Initialization. -----
 
      /* Initializing Motor Control Component. */
#ifdef TARGET_STM32F429
      motor = new L6206(D2, A4, PB_4, PC_7, PA_15, PB_3);
#else
      motor = new L6206(D2, A4, D5, D4, A0, A1);
#endif
 
     /* When init method is called with NULL pointer, the L6206 parameters are set   */
     /* with the predefined values from file l6206_target_config.h, otherwise the    */
     /* parameters are set using the init structure values.          */
     if (motor->init(&init) != COMPONENT_OK) {
         exit(EXIT_FAILURE);
     }
 
      /* Attach the function my_flag_irq_handler (defined below) to the flag interrupt */
      motor->attach_flag_interrupt(my_flag_irq_handler);
 
      /* Attach the function my_error_handler (defined below) to the error Handler*/
      motor->attach_error_handler(my_error_handler);
 
      /* Printing to the console. */
      printf("Motor Control Application Example for 4 Motors\r\n\n");
 
      /* Select the configuration with no bridge paralleling, two unidirectionnal motors on bridge A 
         and two unidirectionnal motors on bridge B */
      motor->set_dual_full_bridge_config(PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B);
 
      /* Set PWM Frequency of bridge A inputs to 1000 Hz */ 
      motor->set_bridge_input_pwm_freq(0,1000);
  
      /* Set PWM Frequency of bridge B inputs to 2000 Hz */ 
      motor->set_bridge_input_pwm_freq(1,2000);
  
      // Attach my_button_pressed function to Irq
      my_button_irq.fall(&my_button_pressed);

      int leftPulses  = 0;    //How far the left wheel has travelled.
      int rightPulses = 0;    //How far the right wheel has travelled.
      int distance    = 6000; //Number of pulses to travel.
 
*/
    while (1) {

        ros::Time current_time = nh.now();

        // drive in a circle
        double dx = 0.2;
        double dtheta = 0.18;
        x += cos(theta)*dx*0.1;
        y += sin(theta)*dx*0.1;
        theta += dtheta*0.1;
        if (theta > 3.14)
            theta=-3.14;

        // tf odom->base_link
        t.header.frame_id = odom;
        t.child_frame_id = base_link;

        t.transform.translation.x = x;
        t.transform.translation.y = y;

        t.transform.rotation = tf::createQuaternionFromYaw(theta);
        t.header.stamp = nh.now();
        
        odom_msg.header.stamp = current_time;

        broadcaster.sendTransform(t);
        nh.spinOnce();

        pc.printf("\r\n");
 
        magnetometer->get_m_axes(axes);
        imu_mag.magnetic_field.x = axes[0]*G;
        imu_mag.magnetic_field.y = axes[1]*G;
        imu_mag.magnetic_field.z = axes[2]*G;

        pc.printf("LSM303AGR [magneto/mgauss]:      %6ld, %6ld, %6ld\r\n", axes[0], axes[1], axes[2]);
        
        acc_gyro->get_x_axes(axes);
        imu.linear_acceleration.x = axes[0];
        imu.linear_acceleration.y = axes[1];
        imu.linear_acceleration.z = axes[2];

        pc.printf("LSM6DSL [acc/mg]:      %6ld, %6ld, %6ld\r\n", axes[0], axes[1], axes[2]);
     
        acc_gyro->get_g_axes(axes);
        imu.angular_velocity.x = axes[0];
        imu.angular_velocity.y = axes[1];
        imu.angular_velocity.z = axes[2];

        pc.printf("LSM6DSLraw [gyro/mdps]:   %6ld, %6ld, %6ld\r\n", axes[0], axes[1], axes[2]);
        
        for(int i=0;i<3;i++)
            {axes[i]=axes[i]-off[i];}
        printf("LSM6DSLfine [gyro/mdps]:   %6ld, %6ld, %6ld\r\n", axes[0], axes[1], axes[2]);
        k=k+1;
        wait(1);

        t.header.frame_id = odom;
        t.child_frame_id = base_link;
        
        t.transform.rotation = tf::createQuaternionFromYaw(theta);
                
        
        imu.header.stamp = current_time;
        imu.header.frame_id = s_imu;         
        //imu.angular_velocity_covariance =        
        //imu.linear_acceleration_covariance =

        imu_mag.header.stamp = current_time;
        imu_mag.header.frame_id = s_imu;        
        //imu_mag.covariance =

        imu_publisher.publish( &imu );
        mag_publisher.publish( &imu_mag );

        // ricavo l'parziale dalla velocitÃ  angolare
        
        for(int i=0;i<3;i++) {
            parziale[i]=(axes[i]*sens)/1000;
            parziale[i]/= 1000;

            if (axes[i]>150 ||axes[i]<-150)
                finale[i] += parziale[i];
          
        }
        //printf("finale  [gyro/d]:   %6f, %6f, %6f\r\n", finale[0], finale[1], finale[2]);//angolo


        wait_ms(10);
/*
        if (gStep > 0) {
            printf("Running motor 0 at 5%% of the maximum speed\r\n");
            /* Set speed of motor 0 to 5% */
            motor->set_speed(0,5);
            /* start motor 0 */
            motor->run(0, BDCMotor::FWD);
        }
 
        if (gStep > 1) {
            printf("Running motor 1 at 10%% of the maximum speed\r\n");
            /* Set speed of motor 1 to 10 % */
            motor->set_speed(1,10);
            /* start motor 1 */
            motor->run(1, BDCMotor::FWD);
        }
 
        if (gStep > 2) {
            printf("Running motor 2 at 15%% of the maximum speed\r\n");
            /* Set speed of motor 2 to 15 % */
            motor->set_speed(2,15);
            /* start motor 2 */
            motor->run(2, BDCMotor::FWD);
        }
 
        if (gStep > 3)  {
            printf("Running motor 3 at 20%% of the maximum speed\r\n");
            /* Set speed of motor 3 to 20 % */
            motor->set_speed(3,20);
            /* start motor 3 */
            motor->run(3, BDCMotor::FWD);      
        }
 
        if (gStep > 0) {
            wait_ms(1000);
        
            motor->hard_hiz(0);   
            motor->hard_hiz(1);   
            motor->hard_hiz(2);   
            motor->hard_hiz(3);
            
            wait_ms(1000);
        }

        leftPulses  = leftQei.getPulses();
        rightPulses = rightQei.getPulses();
        */
    }
}

